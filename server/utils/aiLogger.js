// server/utils/aiLogger.js
import { GoogleGenerativeAI } from "@google/generative-ai";
import chalk from "chalk";

// L·∫•y API key t·ª´ .env
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

// N·∫øu c√≥ key th√¨ t·∫°o model, kh√¥ng th√¨ ƒë·ªÉ null
let model = null;
if (GEMINI_API_KEY) {
    const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    model = genAI.getGenerativeModel({ model: "gemini-pro" });
}

/**
 * Log l·ªói runtime v·ªõi stack trace + t√≥m t·∫Øt t·ª´ Gemini (n·∫øu c√≥ API key)
 * @param {Error} error 
 */
export async function aiLogError(error) {
    console.error(chalk.red("üî• Runtime Error:"), error.stack || error);

    if (model) {
        try {
            const prompt = `H√£y t√≥m t·∫Øt l·ªói ng·∫Øn g·ªçn, ch·ªâ 1 d√≤ng s√∫c t√≠ch: ${error.stack}`;
            const result = await model.generateContent(prompt);

            console.log(chalk.magenta("ü§ñ AI Summary:"), result.response.text());
        } catch (aiErr) {
            console.warn(chalk.yellow("‚ö†Ô∏è Gemini AI log failed:"), aiErr.message);
        }
    } else {
        console.log(chalk.gray("‚ÑπÔ∏è Gemini disabled (no API key in .env)"));
    }
}